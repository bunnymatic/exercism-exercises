exit
continue
next
continue
self.total
self
is_spare?
(is_spare? && includes_bonus_rolls?)
(is_strike? && includes_strike_bonus_rolls?)
exit
continue
@frame.get(10)
@rolls
@frames.last
@frames
continue
exit
continue
f.send(:includes_bonus_rolls?)
f.is_strike?
f.valid?
f = @frames.get(10)
@frames.get(10)
continue
f.send(:has_2_rolls?)
f.send(:is_spare_with_bonus?)
f.send(:is_valid_spare_in_last_frame?)
f.send(:is_valid_strike_in_last_frame?)
f.is_valid_strike_in_last_frame?
f.valid?
f = @frames.get(10)
@frames.get(10)
@frames.to_s
@frames.valid?
continue
f.send(:bonus)
f.send(:second)
f.second
f.send(:is_valid_spare_in_last_frame?)
f = @frames.get(10)
@frame.send(:"is_valid_spare_in_last_frame?")
@frame.send(:is_valid_spare_in_last_frame?)
@frames.get(10).valid?
@frames.get(10)
@frames.last
@frames.valid?
continue
@frames.to_s
@frames.valid?
continue
e
next
continue
@frames.valid?
continue
@rolls
@frames.valid?
@frames.nil?
continue
@frames
continue
exit
continue
is_strike_with_bonus?
continue
is_strike? && !bonus.nil?
self
continue
e
step
current_frame
continue
@frames[9]
@frames[10]
@frames
@frames[frame_number + 1..frame_number + 2]
frame_number
next_rolls
next
step
current_frame
continue
current_frame
continue
index
@rolls.length
next
[args].flatten
args
step
@rolls[index..-1]
@index
@rolls
current_frame
exit
exot
continue
@rolls.any?{|pins| pins.nil? || !pins.between?(0,10)}
continue
@rolls
@rolls.any?{|pins| pins.nil? || !pins.between?(0,10)}
continue
@rolls.any?{|pins| pins.nil? || !pins.between?(0,10)}
continue
@rolls.any?{|pins| pins.nil? || !pins.between?(0,10)}
continue
@rolls.any?{|pins| pins.nil? || !pins.between?(0,10)}
continue
@rolls.any?{|pins| pins.nil? || !pins.between?(0,10)}
continue
@rolls.any?{|pins| pins.nil? || !pins.between?(0,10)}
@rolls
